(function(){'use strict';angular.module("yourcall:services",[]),angular.module("yourcall:directives",[]),angular.module("yourcall:app",["yourcall:services","yourcall:directives","ngRoute","ngCookies"]).config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{templateUrl:"/partials/singlequestion.html"}).when("/ask",{templateUrl:"/partials/newquestion.html",controller:"NewQuestionCtrl",controllerAs:"vm"}).when("/q/:question_url",{templateUrl:"/partials/singlequestion.html",controller:"SingleQuestionCtrl",controllerAs:"vm"}).when("/q/:question_url/result",{templateUrl:"/partials/singlequestion.html",controller:"SingleQuestionCtrl",controllerAs:"vm"}).when("/oops/notfound",{templateUrl:"/partials/notfound.html",controller:"NotFoundCtrl",controllerAs:"vm"}),t.html5Mode(!0)}]).run(["$rootScope","$window","$location",function(e,t,o){e.$on("$viewContentLoaded",function(){t.ga("send","pageview",{page:o.path()})})}]),angular.module("yourcall:app").controller("MainCtrl",["$scope","$http","$location","pageService","questionService","utilityService",function(e,t,o,n,r){e.title=n.getTitle,r.getRandomQuestion().then(function(e){"/"===o.path()&&o.path("/q/"+e.data)})}]),angular.module("yourcall:app").controller("NewQuestionCtrl",["$scope","$location","pageService","questionService","UITextService","appService",function(e,t,o,n,r,i){var l=this;o.setTitle(r.titles.NEW_QUESTION),l.submitted=!1,l.errorMessage="",l.formData={},l.formData.isPrivate=!1,l.createQuestion=function(){l.formData.title&&l.formData.option_1&&l.formData.option_2?l.formData.title.length>i.TITLE_THRESHOLD?l.errorMessage=r.ERROR_LONG_QUESTION:l.formData.option_1.length>i.OPTION_THRESHOLD||l.formData.option_2.length>i.OPTION_THRESHOLD?l.errorMessage=r.ERROR_LONG_OPTION:(l.submitted=!0,l.errorMessage="",n.createQuestion(l.formData).success(function(e){l.formData={},l.newQuestion=e,t.path("/q/"+e.url)})):l.errorMessage=r.ERROR_FIELDS_EMPTY}}]),angular.module("yourcall:app").controller("NotFoundCtrl",["$scope","questionService",function(e,t){var o=this;t.getRandomQuestion().then(function(e){o.questionUrl=e.data})}]),angular.module("yourcall:app").controller("SingleQuestionCtrl",["$scope","$routeParams","$location","questionService","UITextService",function(e,t,o,n,r){var i=this;i.showResult=!1,o.$$path.indexOf("result")>-1&&(i.showResult=!0),i.reportMessage=r.REPORT,i.deleteMessage=r.DELETE,t.question_url&&n.getQuestion(t.question_url).success(function(e){i.question=e,i.isOwnedQuestion=e.owned,i.totalVotes=e.totalVotes}),n.getRandomQuestion().success(function(e){i.nextQuestion=e}),i.deleteQuestion=function(e){i.deleteMessage=r.PENDING_DELETE,n.deleteQuestion(e).success(function(){o.path("/q/"+i.nextQuestion)})},i.vote=function(e,t){e.hasVoted||n.voteOnQuestion(e,t).success(function(){i.totalVotes=e.option_1_votes+e.option_2_votes})},i.reportQuestion=function(e){i.reportMessage=r.REPORTED,n.reportQuestion(e)}}]),angular.module("yourcall:directives").directive("option",function(){return{restrict:"E",templateUrl:"partials/directives/option.html",scope:{},link:function(){}}}),angular.module("yourcall:directives").directive("pollBar",["$timeout","appService",function(e,t){return{restrict:"A",scope:{voted:"@",showResult:"="},link:function(o,n){var r,i,l=document.getElementById("result-1"),s=document.getElementById("result-2"),u=document.querySelector(".option-1"),a=document.querySelector(".option-2"),c=document.getElementById("next-button"),d=function(){r=l.textContent.replace("%","")+"vh",i=s.textContent.replace("%","")+"vh",u.style.height=r,a.style.height=i},p=function(){l.classList.add("show-percentage"),s.classList.add("show-percentage")},f=function(){c.classList.add("shake-rotate")},E=function(){e(d,100),e(p,t.DISPLAY_PERCENTAGES_DELAY),e(f,t.DISPLAY_BUTTON_ANIMATION_DELAY)};o.showResult?E():o.$watch("voted",function(e){e?E():n.on("click",E)})}}}]),angular.module("yourcall:directives").directive("selfRefresh",["$location","$route",function(e,t){return function(o,n){n.bind("click",function(){n[0]&&n[0].href&&n[0].href===e.absUrl()&&t.reload()})}}]),angular.module("yourcall:directives").directive("siteFooter",["$rootScope","$location",function(e,t){return{restrict:"E",templateUrl:"/partials/directives/sitefooter.html",link:function(o,n){e.$on("$routeChangeSuccess",function(){t.path().indexOf("notfound")>-1?n.addClass("hidden"):n.removeClass("hidden")})}}}]),angular.module("yourcall:services").factory("UITextService",function(){var e={titles:{BASE_PAGE_TITLE:"YourCall.io",QUESTION_PAGE_TITLE:"Your Call: ",NEW_QUESTION:"Ask a question"},CONFIRMATION_MESSAGE:"Are you sure?",DELETE:"Delete",PENDING_DELETE:"Deleting...",REPORT:"Report",REPORTED:"Flagged for review",ERROR_LONG_QUESTION:"Please try to shorten your question.",ERROR_LONG_OPTION:"Please try to shorten your options.",ERROR_FIELDS_EMPTY:"Please fill in all fields."};return e}),angular.module("yourcall:services").factory("appService",function(){var e={cookieNames:{OWNED_QUESTIONS:"own_q",VOTES:"votes"},TITLE_THRESHOLD:37,OPTION_THRESHOLD:50,DISPLAY_PERCENTAGES_DELAY:1500,DISPLAY_BUTTON_ANIMATION_DELAY:5e3};return e}),angular.module("yourcall:services").factory("pageService",["UITextService",function(e){var t={},o=e.BASE_PAGE_TITLE;return t.getTitle=function(){return o},t.setTitle=function(t){o=e.titles.QUESTION_PAGE_TITLE+t},t}]),angular.module("yourcall:services").factory("questionService",["$http","$location","$window","UITextService","utilityService","appService","pageService",function(e,t,o,n,r,i,l){var s={};return s.fetchedQuestions=[],s.getRandomQuestion=function(){return e.get("/api/random")},s.deleteQuestion=function(t){var l=o.confirm(n.CONFIRMATION_MESSAGE),s="";if(l){if(r.readCookie(i.cookieNames.OWNED_QUESTIONS))for(var u=r.readCookie(i.cookieNames.OWNED_QUESTIONS).split("|"),a=0;a<u.length;a++)t===u[a].split(":")[0]&&(s=u[a].split(":")[1]);return e.delete("/api/delete/"+t+"?verify="+s)}},s.getQuestion=function(o){var n="",s=r.readCookie(i.cookieNames.VOTES);if(r.readCookie(i.cookieNames.OWNED_QUESTIONS))for(var u=r.readCookie(i.cookieNames.OWNED_QUESTIONS).split("|"),a=0;a<u.length;a++)n+=":"+u[a].split(":")[0];return e.get("/api/questions/"+o).success(function(e){l.setTitle(e.title),s&&s.indexOf(e.url)>-1&&(e.hasVoted=!0),n.indexOf(e._id)>-1&&(e.owned=!0),e.totalVotes=e.option_1_votes+e.option_2_votes}).error(function(){t.path("/oops/notfound")})},s.voteOnQuestion=function(t,o){return e.put("/api/vote/"+t.url+"/"+o).success(function(e){"true"===e.success&&(t["option_"+o+"_votes"]+=1,t.hasVoted=!0)})},s.reportQuestion=function(t){e.put("/api/report/"+t)},s.createQuestion=function(t){return e.post("/api/questions",t)},s.getAllQuestions=function(){return e.get("/api/questions")},s.getReportedQuestions=function(){return e.get("/api/reported")},s}]),angular.module("yourcall:services").factory("utilityService",["$cookies",function(){var e={};return e.readCookie=function(e){for(var t=e+"=",o=document.cookie.split(";"),n=0;n<o.length;n++){for(var r=o[n];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(t))return r.substring(t.length,r.length)}return null},e}]);})();
//# sourceMappingURL=data:application/json;base64,